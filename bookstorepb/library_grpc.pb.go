// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: library.proto

package bookstorepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BookService_CreateBook_FullMethodName = "/bookstore.BookService/CreateBook"
	BookService_GetBook_FullMethodName    = "/bookstore.BookService/GetBook"
	BookService_UpdateBook_FullMethodName = "/bookstore.BookService/UpdateBook"
	BookService_DeleteBook_FullMethodName = "/bookstore.BookService/DeleteBook"
)

// BookServiceClient is the client API for BookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookServiceClient interface {
	// 创建一本新书
	CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error)
	// 根据书籍ID获取书籍
	GetBook(ctx context.Context, in *GetBookRequest, opts ...grpc.CallOption) (*GetBookResponse, error)
	// 更新书籍信息
	UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...grpc.CallOption) (*UpdateBookResponse, error)
	// 删除书籍
	DeleteBook(ctx context.Context, in *DeleteBookRequest, opts ...grpc.CallOption) (*DeleteBookResponse, error)
}

type bookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServiceClient(cc grpc.ClientConnInterface) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBookResponse)
	err := c.cc.Invoke(ctx, BookService_CreateBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBook(ctx context.Context, in *GetBookRequest, opts ...grpc.CallOption) (*GetBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookResponse)
	err := c.cc.Invoke(ctx, BookService_GetBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...grpc.CallOption) (*UpdateBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBookResponse)
	err := c.cc.Invoke(ctx, BookService_UpdateBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) DeleteBook(ctx context.Context, in *DeleteBookRequest, opts ...grpc.CallOption) (*DeleteBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBookResponse)
	err := c.cc.Invoke(ctx, BookService_DeleteBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServiceServer is the server API for BookService service.
// All implementations must embed UnimplementedBookServiceServer
// for forward compatibility.
type BookServiceServer interface {
	// 创建一本新书
	CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error)
	// 根据书籍ID获取书籍
	GetBook(context.Context, *GetBookRequest) (*GetBookResponse, error)
	// 更新书籍信息
	UpdateBook(context.Context, *UpdateBookRequest) (*UpdateBookResponse, error)
	// 删除书籍
	DeleteBook(context.Context, *DeleteBookRequest) (*DeleteBookResponse, error)
	mustEmbedUnimplementedBookServiceServer()
}

// UnimplementedBookServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookServiceServer struct{}

func (UnimplementedBookServiceServer) CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBookServiceServer) GetBook(context.Context, *GetBookRequest) (*GetBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedBookServiceServer) UpdateBook(context.Context, *UpdateBookRequest) (*UpdateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (UnimplementedBookServiceServer) DeleteBook(context.Context, *DeleteBookRequest) (*DeleteBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
}
func (UnimplementedBookServiceServer) mustEmbedUnimplementedBookServiceServer() {}
func (UnimplementedBookServiceServer) testEmbeddedByValue()                     {}

// UnsafeBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServiceServer will
// result in compilation errors.
type UnsafeBookServiceServer interface {
	mustEmbedUnimplementedBookServiceServer()
}

func RegisterBookServiceServer(s grpc.ServiceRegistrar, srv BookServiceServer) {
	// If the following call pancis, it indicates UnimplementedBookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookService_ServiceDesc, srv)
}

func _BookService_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_CreateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).CreateBook(ctx, req.(*CreateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_GetBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBook(ctx, req.(*GetBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_UpdateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).UpdateBook(ctx, req.(*UpdateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_DeleteBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).DeleteBook(ctx, req.(*DeleteBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookService_ServiceDesc is the grpc.ServiceDesc for BookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookstore.BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBook",
			Handler:    _BookService_CreateBook_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _BookService_GetBook_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _BookService_UpdateBook_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _BookService_DeleteBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}

const (
	StockRequestService_CreateStockRequest_FullMethodName = "/bookstore.StockRequestService/CreateStockRequest"
	StockRequestService_UpdateStockRequest_FullMethodName = "/bookstore.StockRequestService/UpdateStockRequest"
)

// StockRequestServiceClient is the client API for StockRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --------------------------------------------缺书部分--------------------------------------------
type StockRequestServiceClient interface {
	// 创建缺书登记记录
	CreateStockRequest(ctx context.Context, in *CreateStockRequestRequest, opts ...grpc.CallOption) (*CreateStockRequestResponse, error)
	// 更新缺书登记记录
	UpdateStockRequest(ctx context.Context, in *UpdateStockRequestRequest, opts ...grpc.CallOption) (*UpdateStockRequestResponse, error)
}

type stockRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockRequestServiceClient(cc grpc.ClientConnInterface) StockRequestServiceClient {
	return &stockRequestServiceClient{cc}
}

func (c *stockRequestServiceClient) CreateStockRequest(ctx context.Context, in *CreateStockRequestRequest, opts ...grpc.CallOption) (*CreateStockRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStockRequestResponse)
	err := c.cc.Invoke(ctx, StockRequestService_CreateStockRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockRequestServiceClient) UpdateStockRequest(ctx context.Context, in *UpdateStockRequestRequest, opts ...grpc.CallOption) (*UpdateStockRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStockRequestResponse)
	err := c.cc.Invoke(ctx, StockRequestService_UpdateStockRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockRequestServiceServer is the server API for StockRequestService service.
// All implementations must embed UnimplementedStockRequestServiceServer
// for forward compatibility.
//
// --------------------------------------------缺书部分--------------------------------------------
type StockRequestServiceServer interface {
	// 创建缺书登记记录
	CreateStockRequest(context.Context, *CreateStockRequestRequest) (*CreateStockRequestResponse, error)
	// 更新缺书登记记录
	UpdateStockRequest(context.Context, *UpdateStockRequestRequest) (*UpdateStockRequestResponse, error)
	mustEmbedUnimplementedStockRequestServiceServer()
}

// UnimplementedStockRequestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStockRequestServiceServer struct{}

func (UnimplementedStockRequestServiceServer) CreateStockRequest(context.Context, *CreateStockRequestRequest) (*CreateStockRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStockRequest not implemented")
}
func (UnimplementedStockRequestServiceServer) UpdateStockRequest(context.Context, *UpdateStockRequestRequest) (*UpdateStockRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStockRequest not implemented")
}
func (UnimplementedStockRequestServiceServer) mustEmbedUnimplementedStockRequestServiceServer() {}
func (UnimplementedStockRequestServiceServer) testEmbeddedByValue()                             {}

// UnsafeStockRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockRequestServiceServer will
// result in compilation errors.
type UnsafeStockRequestServiceServer interface {
	mustEmbedUnimplementedStockRequestServiceServer()
}

func RegisterStockRequestServiceServer(s grpc.ServiceRegistrar, srv StockRequestServiceServer) {
	// If the following call pancis, it indicates UnimplementedStockRequestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StockRequestService_ServiceDesc, srv)
}

func _StockRequestService_CreateStockRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStockRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockRequestServiceServer).CreateStockRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockRequestService_CreateStockRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockRequestServiceServer).CreateStockRequest(ctx, req.(*CreateStockRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockRequestService_UpdateStockRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStockRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockRequestServiceServer).UpdateStockRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockRequestService_UpdateStockRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockRequestServiceServer).UpdateStockRequest(ctx, req.(*UpdateStockRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StockRequestService_ServiceDesc is the grpc.ServiceDesc for StockRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookstore.StockRequestService",
	HandlerType: (*StockRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStockRequest",
			Handler:    _StockRequestService_CreateStockRequest_Handler,
		},
		{
			MethodName: "UpdateStockRequest",
			Handler:    _StockRequestService_UpdateStockRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}

const (
	PurchaseOrderService_CreatePurchaseOrder_FullMethodName                     = "/bookstore.PurchaseOrderService/CreatePurchaseOrder"
	PurchaseOrderService_GetPurchaseOrder_FullMethodName                        = "/bookstore.PurchaseOrderService/GetPurchaseOrder"
	PurchaseOrderService_UpdatePurchaseOrder_FullMethodName                     = "/bookstore.PurchaseOrderService/UpdatePurchaseOrder"
	PurchaseOrderService_DeletePurchaseOrder_FullMethodName                     = "/bookstore.PurchaseOrderService/DeletePurchaseOrder"
	PurchaseOrderService_GeneratePurchaseOrdersFromStockRequests_FullMethodName = "/bookstore.PurchaseOrderService/GeneratePurchaseOrdersFromStockRequests"
)

// PurchaseOrderServiceClient is the client API for PurchaseOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --------------------------------------------采购单部分--------------------------------------------
type PurchaseOrderServiceClient interface {
	CreatePurchaseOrder(ctx context.Context, in *CreatePurchaseOrderRequest, opts ...grpc.CallOption) (*CreatePurchaseOrderResponse, error)
	GetPurchaseOrder(ctx context.Context, in *GetPurchaseOrderRequest, opts ...grpc.CallOption) (*GetPurchaseOrderResponse, error)
	UpdatePurchaseOrder(ctx context.Context, in *UpdatePurchaseOrderRequest, opts ...grpc.CallOption) (*UpdatePurchaseOrderResponse, error)
	DeletePurchaseOrder(ctx context.Context, in *DeletePurchaseOrderRequest, opts ...grpc.CallOption) (*DeletePurchaseOrderResponse, error)
	GeneratePurchaseOrdersFromStockRequests(ctx context.Context, in *GeneratePurchaseOrdersRequest, opts ...grpc.CallOption) (*GeneratePurchaseOrdersResponse, error)
}

type purchaseOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPurchaseOrderServiceClient(cc grpc.ClientConnInterface) PurchaseOrderServiceClient {
	return &purchaseOrderServiceClient{cc}
}

func (c *purchaseOrderServiceClient) CreatePurchaseOrder(ctx context.Context, in *CreatePurchaseOrderRequest, opts ...grpc.CallOption) (*CreatePurchaseOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePurchaseOrderResponse)
	err := c.cc.Invoke(ctx, PurchaseOrderService_CreatePurchaseOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOrderServiceClient) GetPurchaseOrder(ctx context.Context, in *GetPurchaseOrderRequest, opts ...grpc.CallOption) (*GetPurchaseOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPurchaseOrderResponse)
	err := c.cc.Invoke(ctx, PurchaseOrderService_GetPurchaseOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOrderServiceClient) UpdatePurchaseOrder(ctx context.Context, in *UpdatePurchaseOrderRequest, opts ...grpc.CallOption) (*UpdatePurchaseOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePurchaseOrderResponse)
	err := c.cc.Invoke(ctx, PurchaseOrderService_UpdatePurchaseOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOrderServiceClient) DeletePurchaseOrder(ctx context.Context, in *DeletePurchaseOrderRequest, opts ...grpc.CallOption) (*DeletePurchaseOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePurchaseOrderResponse)
	err := c.cc.Invoke(ctx, PurchaseOrderService_DeletePurchaseOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOrderServiceClient) GeneratePurchaseOrdersFromStockRequests(ctx context.Context, in *GeneratePurchaseOrdersRequest, opts ...grpc.CallOption) (*GeneratePurchaseOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneratePurchaseOrdersResponse)
	err := c.cc.Invoke(ctx, PurchaseOrderService_GeneratePurchaseOrdersFromStockRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurchaseOrderServiceServer is the server API for PurchaseOrderService service.
// All implementations must embed UnimplementedPurchaseOrderServiceServer
// for forward compatibility.
//
// --------------------------------------------采购单部分--------------------------------------------
type PurchaseOrderServiceServer interface {
	CreatePurchaseOrder(context.Context, *CreatePurchaseOrderRequest) (*CreatePurchaseOrderResponse, error)
	GetPurchaseOrder(context.Context, *GetPurchaseOrderRequest) (*GetPurchaseOrderResponse, error)
	UpdatePurchaseOrder(context.Context, *UpdatePurchaseOrderRequest) (*UpdatePurchaseOrderResponse, error)
	DeletePurchaseOrder(context.Context, *DeletePurchaseOrderRequest) (*DeletePurchaseOrderResponse, error)
	GeneratePurchaseOrdersFromStockRequests(context.Context, *GeneratePurchaseOrdersRequest) (*GeneratePurchaseOrdersResponse, error)
	mustEmbedUnimplementedPurchaseOrderServiceServer()
}

// UnimplementedPurchaseOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPurchaseOrderServiceServer struct{}

func (UnimplementedPurchaseOrderServiceServer) CreatePurchaseOrder(context.Context, *CreatePurchaseOrderRequest) (*CreatePurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePurchaseOrder not implemented")
}
func (UnimplementedPurchaseOrderServiceServer) GetPurchaseOrder(context.Context, *GetPurchaseOrderRequest) (*GetPurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchaseOrder not implemented")
}
func (UnimplementedPurchaseOrderServiceServer) UpdatePurchaseOrder(context.Context, *UpdatePurchaseOrderRequest) (*UpdatePurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePurchaseOrder not implemented")
}
func (UnimplementedPurchaseOrderServiceServer) DeletePurchaseOrder(context.Context, *DeletePurchaseOrderRequest) (*DeletePurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePurchaseOrder not implemented")
}
func (UnimplementedPurchaseOrderServiceServer) GeneratePurchaseOrdersFromStockRequests(context.Context, *GeneratePurchaseOrdersRequest) (*GeneratePurchaseOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePurchaseOrdersFromStockRequests not implemented")
}
func (UnimplementedPurchaseOrderServiceServer) mustEmbedUnimplementedPurchaseOrderServiceServer() {}
func (UnimplementedPurchaseOrderServiceServer) testEmbeddedByValue()                              {}

// UnsafePurchaseOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PurchaseOrderServiceServer will
// result in compilation errors.
type UnsafePurchaseOrderServiceServer interface {
	mustEmbedUnimplementedPurchaseOrderServiceServer()
}

func RegisterPurchaseOrderServiceServer(s grpc.ServiceRegistrar, srv PurchaseOrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedPurchaseOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PurchaseOrderService_ServiceDesc, srv)
}

func _PurchaseOrderService_CreatePurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseOrderServiceServer).CreatePurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseOrderService_CreatePurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseOrderServiceServer).CreatePurchaseOrder(ctx, req.(*CreatePurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseOrderService_GetPurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseOrderServiceServer).GetPurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseOrderService_GetPurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseOrderServiceServer).GetPurchaseOrder(ctx, req.(*GetPurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseOrderService_UpdatePurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseOrderServiceServer).UpdatePurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseOrderService_UpdatePurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseOrderServiceServer).UpdatePurchaseOrder(ctx, req.(*UpdatePurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseOrderService_DeletePurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseOrderServiceServer).DeletePurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseOrderService_DeletePurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseOrderServiceServer).DeletePurchaseOrder(ctx, req.(*DeletePurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseOrderService_GeneratePurchaseOrdersFromStockRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratePurchaseOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseOrderServiceServer).GeneratePurchaseOrdersFromStockRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseOrderService_GeneratePurchaseOrdersFromStockRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseOrderServiceServer).GeneratePurchaseOrdersFromStockRequests(ctx, req.(*GeneratePurchaseOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PurchaseOrderService_ServiceDesc is the grpc.ServiceDesc for PurchaseOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PurchaseOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookstore.PurchaseOrderService",
	HandlerType: (*PurchaseOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePurchaseOrder",
			Handler:    _PurchaseOrderService_CreatePurchaseOrder_Handler,
		},
		{
			MethodName: "GetPurchaseOrder",
			Handler:    _PurchaseOrderService_GetPurchaseOrder_Handler,
		},
		{
			MethodName: "UpdatePurchaseOrder",
			Handler:    _PurchaseOrderService_UpdatePurchaseOrder_Handler,
		},
		{
			MethodName: "DeletePurchaseOrder",
			Handler:    _PurchaseOrderService_DeletePurchaseOrder_Handler,
		},
		{
			MethodName: "GeneratePurchaseOrdersFromStockRequests",
			Handler:    _PurchaseOrderService_GeneratePurchaseOrdersFromStockRequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}

const (
	CustomerService_CreateCustomer_FullMethodName = "/bookstore.CustomerService/CreateCustomer"
	CustomerService_GetCustomer_FullMethodName    = "/bookstore.CustomerService/GetCustomer"
	CustomerService_UpdateCustomer_FullMethodName = "/bookstore.CustomerService/UpdateCustomer"
	CustomerService_DeleteCustomer_FullMethodName = "/bookstore.CustomerService/DeleteCustomer"
)

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --------------------------------------------客户信息管理部分--------------------------------------------
type CustomerServiceClient interface {
	// 创建新客户
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error)
	// 获取客户详细信息
	GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*GetCustomerResponse, error)
	// 更新客户信息
	UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error)
	// 删除客户记录
	DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*DeleteCustomerResponse, error)
}

type customerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceClient(cc grpc.ClientConnInterface) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCustomerResponse)
	err := c.cc.Invoke(ctx, CustomerService_CreateCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*GetCustomerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCustomerResponse)
	err := c.cc.Invoke(ctx, CustomerService_GetCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCustomerResponse)
	err := c.cc.Invoke(ctx, CustomerService_UpdateCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*DeleteCustomerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCustomerResponse)
	err := c.cc.Invoke(ctx, CustomerService_DeleteCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
// All implementations must embed UnimplementedCustomerServiceServer
// for forward compatibility.
//
// --------------------------------------------客户信息管理部分--------------------------------------------
type CustomerServiceServer interface {
	// 创建新客户
	CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error)
	// 获取客户详细信息
	GetCustomer(context.Context, *GetCustomerRequest) (*GetCustomerResponse, error)
	// 更新客户信息
	UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerResponse, error)
	// 删除客户记录
	DeleteCustomer(context.Context, *DeleteCustomerRequest) (*DeleteCustomerResponse, error)
	mustEmbedUnimplementedCustomerServiceServer()
}

// UnimplementedCustomerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCustomerServiceServer struct{}

func (UnimplementedCustomerServiceServer) CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedCustomerServiceServer) GetCustomer(context.Context, *GetCustomerRequest) (*GetCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (UnimplementedCustomerServiceServer) UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (UnimplementedCustomerServiceServer) DeleteCustomer(context.Context, *DeleteCustomerRequest) (*DeleteCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomer not implemented")
}
func (UnimplementedCustomerServiceServer) mustEmbedUnimplementedCustomerServiceServer() {}
func (UnimplementedCustomerServiceServer) testEmbeddedByValue()                         {}

// UnsafeCustomerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServiceServer will
// result in compilation errors.
type UnsafeCustomerServiceServer interface {
	mustEmbedUnimplementedCustomerServiceServer()
}

func RegisterCustomerServiceServer(s grpc.ServiceRegistrar, srv CustomerServiceServer) {
	// If the following call pancis, it indicates UnimplementedCustomerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CustomerService_ServiceDesc, srv)
}

func _CustomerService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_CreateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CreateCustomer(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_GetCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomer(ctx, req.(*GetCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_UpdateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomer(ctx, req.(*UpdateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_DeleteCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).DeleteCustomer(ctx, req.(*DeleteCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerService_ServiceDesc is the grpc.ServiceDesc for CustomerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookstore.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomer",
			Handler:    _CustomerService_CreateCustomer_Handler,
		},
		{
			MethodName: "GetCustomer",
			Handler:    _CustomerService_GetCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _CustomerService_UpdateCustomer_Handler,
		},
		{
			MethodName: "DeleteCustomer",
			Handler:    _CustomerService_DeleteCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}

const (
	CustomerOrderService_CreateCustomerOrder_FullMethodName = "/bookstore.CustomerOrderService/CreateCustomerOrder"
	CustomerOrderService_GetCustomerOrder_FullMethodName    = "/bookstore.CustomerOrderService/GetCustomerOrder"
	CustomerOrderService_UpdateCustomerOrder_FullMethodName = "/bookstore.CustomerOrderService/UpdateCustomerOrder"
	CustomerOrderService_DeleteCustomerOrder_FullMethodName = "/bookstore.CustomerOrderService/DeleteCustomerOrder"
)

// CustomerOrderServiceClient is the client API for CustomerOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 客户订单服务
type CustomerOrderServiceClient interface {
	CreateCustomerOrder(ctx context.Context, in *CreateCustomerOrderRequest, opts ...grpc.CallOption) (*CreateCustomerOrderResponse, error)
	GetCustomerOrder(ctx context.Context, in *GetCustomerOrderRequest, opts ...grpc.CallOption) (*GetCustomerOrderResponse, error)
	UpdateCustomerOrder(ctx context.Context, in *UpdateCustomerOrderRequest, opts ...grpc.CallOption) (*UpdateCustomerOrderResponse, error)
	DeleteCustomerOrder(ctx context.Context, in *DeleteCustomerOrderRequest, opts ...grpc.CallOption) (*DeleteCustomerOrderResponse, error)
}

type customerOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerOrderServiceClient(cc grpc.ClientConnInterface) CustomerOrderServiceClient {
	return &customerOrderServiceClient{cc}
}

func (c *customerOrderServiceClient) CreateCustomerOrder(ctx context.Context, in *CreateCustomerOrderRequest, opts ...grpc.CallOption) (*CreateCustomerOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCustomerOrderResponse)
	err := c.cc.Invoke(ctx, CustomerOrderService_CreateCustomerOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOrderServiceClient) GetCustomerOrder(ctx context.Context, in *GetCustomerOrderRequest, opts ...grpc.CallOption) (*GetCustomerOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCustomerOrderResponse)
	err := c.cc.Invoke(ctx, CustomerOrderService_GetCustomerOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOrderServiceClient) UpdateCustomerOrder(ctx context.Context, in *UpdateCustomerOrderRequest, opts ...grpc.CallOption) (*UpdateCustomerOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCustomerOrderResponse)
	err := c.cc.Invoke(ctx, CustomerOrderService_UpdateCustomerOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOrderServiceClient) DeleteCustomerOrder(ctx context.Context, in *DeleteCustomerOrderRequest, opts ...grpc.CallOption) (*DeleteCustomerOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCustomerOrderResponse)
	err := c.cc.Invoke(ctx, CustomerOrderService_DeleteCustomerOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerOrderServiceServer is the server API for CustomerOrderService service.
// All implementations must embed UnimplementedCustomerOrderServiceServer
// for forward compatibility.
//
// 客户订单服务
type CustomerOrderServiceServer interface {
	CreateCustomerOrder(context.Context, *CreateCustomerOrderRequest) (*CreateCustomerOrderResponse, error)
	GetCustomerOrder(context.Context, *GetCustomerOrderRequest) (*GetCustomerOrderResponse, error)
	UpdateCustomerOrder(context.Context, *UpdateCustomerOrderRequest) (*UpdateCustomerOrderResponse, error)
	DeleteCustomerOrder(context.Context, *DeleteCustomerOrderRequest) (*DeleteCustomerOrderResponse, error)
	mustEmbedUnimplementedCustomerOrderServiceServer()
}

// UnimplementedCustomerOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCustomerOrderServiceServer struct{}

func (UnimplementedCustomerOrderServiceServer) CreateCustomerOrder(context.Context, *CreateCustomerOrderRequest) (*CreateCustomerOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomerOrder not implemented")
}
func (UnimplementedCustomerOrderServiceServer) GetCustomerOrder(context.Context, *GetCustomerOrderRequest) (*GetCustomerOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerOrder not implemented")
}
func (UnimplementedCustomerOrderServiceServer) UpdateCustomerOrder(context.Context, *UpdateCustomerOrderRequest) (*UpdateCustomerOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerOrder not implemented")
}
func (UnimplementedCustomerOrderServiceServer) DeleteCustomerOrder(context.Context, *DeleteCustomerOrderRequest) (*DeleteCustomerOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomerOrder not implemented")
}
func (UnimplementedCustomerOrderServiceServer) mustEmbedUnimplementedCustomerOrderServiceServer() {}
func (UnimplementedCustomerOrderServiceServer) testEmbeddedByValue()                              {}

// UnsafeCustomerOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerOrderServiceServer will
// result in compilation errors.
type UnsafeCustomerOrderServiceServer interface {
	mustEmbedUnimplementedCustomerOrderServiceServer()
}

func RegisterCustomerOrderServiceServer(s grpc.ServiceRegistrar, srv CustomerOrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedCustomerOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CustomerOrderService_ServiceDesc, srv)
}

func _CustomerOrderService_CreateCustomerOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOrderServiceServer).CreateCustomerOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerOrderService_CreateCustomerOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOrderServiceServer).CreateCustomerOrder(ctx, req.(*CreateCustomerOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOrderService_GetCustomerOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOrderServiceServer).GetCustomerOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerOrderService_GetCustomerOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOrderServiceServer).GetCustomerOrder(ctx, req.(*GetCustomerOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOrderService_UpdateCustomerOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOrderServiceServer).UpdateCustomerOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerOrderService_UpdateCustomerOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOrderServiceServer).UpdateCustomerOrder(ctx, req.(*UpdateCustomerOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOrderService_DeleteCustomerOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOrderServiceServer).DeleteCustomerOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerOrderService_DeleteCustomerOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOrderServiceServer).DeleteCustomerOrder(ctx, req.(*DeleteCustomerOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerOrderService_ServiceDesc is the grpc.ServiceDesc for CustomerOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookstore.CustomerOrderService",
	HandlerType: (*CustomerOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomerOrder",
			Handler:    _CustomerOrderService_CreateCustomerOrder_Handler,
		},
		{
			MethodName: "GetCustomerOrder",
			Handler:    _CustomerOrderService_GetCustomerOrder_Handler,
		},
		{
			MethodName: "UpdateCustomerOrder",
			Handler:    _CustomerOrderService_UpdateCustomerOrder_Handler,
		},
		{
			MethodName: "DeleteCustomerOrder",
			Handler:    _CustomerOrderService_DeleteCustomerOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}

const (
	SupplierService_CreateSupplier_FullMethodName = "/bookstore.SupplierService/CreateSupplier"
	SupplierService_GetSupplier_FullMethodName    = "/bookstore.SupplierService/GetSupplier"
	SupplierService_UpdateSupplier_FullMethodName = "/bookstore.SupplierService/UpdateSupplier"
	SupplierService_DeleteSupplier_FullMethodName = "/bookstore.SupplierService/DeleteSupplier"
)

// SupplierServiceClient is the client API for SupplierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 供应商服务
type SupplierServiceClient interface {
	CreateSupplier(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*CreateSupplierResponse, error)
	GetSupplier(ctx context.Context, in *GetSupplierRequest, opts ...grpc.CallOption) (*GetSupplierResponse, error)
	UpdateSupplier(ctx context.Context, in *UpdateSupplierRequest, opts ...grpc.CallOption) (*UpdateSupplierResponse, error)
	DeleteSupplier(ctx context.Context, in *DeleteSupplierRequest, opts ...grpc.CallOption) (*DeleteSupplierResponse, error)
}

type supplierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSupplierServiceClient(cc grpc.ClientConnInterface) SupplierServiceClient {
	return &supplierServiceClient{cc}
}

func (c *supplierServiceClient) CreateSupplier(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*CreateSupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSupplierResponse)
	err := c.cc.Invoke(ctx, SupplierService_CreateSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) GetSupplier(ctx context.Context, in *GetSupplierRequest, opts ...grpc.CallOption) (*GetSupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSupplierResponse)
	err := c.cc.Invoke(ctx, SupplierService_GetSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) UpdateSupplier(ctx context.Context, in *UpdateSupplierRequest, opts ...grpc.CallOption) (*UpdateSupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSupplierResponse)
	err := c.cc.Invoke(ctx, SupplierService_UpdateSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) DeleteSupplier(ctx context.Context, in *DeleteSupplierRequest, opts ...grpc.CallOption) (*DeleteSupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSupplierResponse)
	err := c.cc.Invoke(ctx, SupplierService_DeleteSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupplierServiceServer is the server API for SupplierService service.
// All implementations must embed UnimplementedSupplierServiceServer
// for forward compatibility.
//
// 供应商服务
type SupplierServiceServer interface {
	CreateSupplier(context.Context, *CreateSupplierRequest) (*CreateSupplierResponse, error)
	GetSupplier(context.Context, *GetSupplierRequest) (*GetSupplierResponse, error)
	UpdateSupplier(context.Context, *UpdateSupplierRequest) (*UpdateSupplierResponse, error)
	DeleteSupplier(context.Context, *DeleteSupplierRequest) (*DeleteSupplierResponse, error)
	mustEmbedUnimplementedSupplierServiceServer()
}

// UnimplementedSupplierServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSupplierServiceServer struct{}

func (UnimplementedSupplierServiceServer) CreateSupplier(context.Context, *CreateSupplierRequest) (*CreateSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupplier not implemented")
}
func (UnimplementedSupplierServiceServer) GetSupplier(context.Context, *GetSupplierRequest) (*GetSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupplier not implemented")
}
func (UnimplementedSupplierServiceServer) UpdateSupplier(context.Context, *UpdateSupplierRequest) (*UpdateSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupplier not implemented")
}
func (UnimplementedSupplierServiceServer) DeleteSupplier(context.Context, *DeleteSupplierRequest) (*DeleteSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSupplier not implemented")
}
func (UnimplementedSupplierServiceServer) mustEmbedUnimplementedSupplierServiceServer() {}
func (UnimplementedSupplierServiceServer) testEmbeddedByValue()                         {}

// UnsafeSupplierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupplierServiceServer will
// result in compilation errors.
type UnsafeSupplierServiceServer interface {
	mustEmbedUnimplementedSupplierServiceServer()
}

func RegisterSupplierServiceServer(s grpc.ServiceRegistrar, srv SupplierServiceServer) {
	// If the following call pancis, it indicates UnimplementedSupplierServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SupplierService_ServiceDesc, srv)
}

func _SupplierService_CreateSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).CreateSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_CreateSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).CreateSupplier(ctx, req.(*CreateSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_GetSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).GetSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_GetSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).GetSupplier(ctx, req.(*GetSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_UpdateSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).UpdateSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_UpdateSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).UpdateSupplier(ctx, req.(*UpdateSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_DeleteSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).DeleteSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_DeleteSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).DeleteSupplier(ctx, req.(*DeleteSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SupplierService_ServiceDesc is the grpc.ServiceDesc for SupplierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SupplierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookstore.SupplierService",
	HandlerType: (*SupplierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSupplier",
			Handler:    _SupplierService_CreateSupplier_Handler,
		},
		{
			MethodName: "GetSupplier",
			Handler:    _SupplierService_GetSupplier_Handler,
		},
		{
			MethodName: "UpdateSupplier",
			Handler:    _SupplierService_UpdateSupplier_Handler,
		},
		{
			MethodName: "DeleteSupplier",
			Handler:    _SupplierService_DeleteSupplier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}

const (
	SupplyBookService_CreateSupplyBook_FullMethodName         = "/bookstore.SupplyBookService/CreateSupplyBook"
	SupplyBookService_GetSupplyBooksBySupplier_FullMethodName = "/bookstore.SupplyBookService/GetSupplyBooksBySupplier"
	SupplyBookService_GetSupplyBookByID_FullMethodName        = "/bookstore.SupplyBookService/GetSupplyBookByID"
	SupplyBookService_UpdateSupplyBook_FullMethodName         = "/bookstore.SupplyBookService/UpdateSupplyBook"
	SupplyBookService_DeleteSupplyBook_FullMethodName         = "/bookstore.SupplyBookService/DeleteSupplyBook"
)

// SupplyBookServiceClient is the client API for SupplyBookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 供书记录服务
type SupplyBookServiceClient interface {
	CreateSupplyBook(ctx context.Context, in *CreateSupplyBookRequest, opts ...grpc.CallOption) (*CreateSupplyBookResponse, error)
	GetSupplyBooksBySupplier(ctx context.Context, in *GetSupplyBooksBySupplierRequest, opts ...grpc.CallOption) (*GetSupplyBooksBySupplierResponse, error)
	GetSupplyBookByID(ctx context.Context, in *GetSupplyBookByIDRequest, opts ...grpc.CallOption) (*GetSupplyBookByIDResponse, error)
	UpdateSupplyBook(ctx context.Context, in *UpdateSupplyBookRequest, opts ...grpc.CallOption) (*UpdateSupplyBookResponse, error)
	DeleteSupplyBook(ctx context.Context, in *DeleteSupplyBookRequest, opts ...grpc.CallOption) (*DeleteSupplyBookResponse, error)
}

type supplyBookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSupplyBookServiceClient(cc grpc.ClientConnInterface) SupplyBookServiceClient {
	return &supplyBookServiceClient{cc}
}

func (c *supplyBookServiceClient) CreateSupplyBook(ctx context.Context, in *CreateSupplyBookRequest, opts ...grpc.CallOption) (*CreateSupplyBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSupplyBookResponse)
	err := c.cc.Invoke(ctx, SupplyBookService_CreateSupplyBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyBookServiceClient) GetSupplyBooksBySupplier(ctx context.Context, in *GetSupplyBooksBySupplierRequest, opts ...grpc.CallOption) (*GetSupplyBooksBySupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSupplyBooksBySupplierResponse)
	err := c.cc.Invoke(ctx, SupplyBookService_GetSupplyBooksBySupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyBookServiceClient) GetSupplyBookByID(ctx context.Context, in *GetSupplyBookByIDRequest, opts ...grpc.CallOption) (*GetSupplyBookByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSupplyBookByIDResponse)
	err := c.cc.Invoke(ctx, SupplyBookService_GetSupplyBookByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyBookServiceClient) UpdateSupplyBook(ctx context.Context, in *UpdateSupplyBookRequest, opts ...grpc.CallOption) (*UpdateSupplyBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSupplyBookResponse)
	err := c.cc.Invoke(ctx, SupplyBookService_UpdateSupplyBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyBookServiceClient) DeleteSupplyBook(ctx context.Context, in *DeleteSupplyBookRequest, opts ...grpc.CallOption) (*DeleteSupplyBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSupplyBookResponse)
	err := c.cc.Invoke(ctx, SupplyBookService_DeleteSupplyBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupplyBookServiceServer is the server API for SupplyBookService service.
// All implementations must embed UnimplementedSupplyBookServiceServer
// for forward compatibility.
//
// 供书记录服务
type SupplyBookServiceServer interface {
	CreateSupplyBook(context.Context, *CreateSupplyBookRequest) (*CreateSupplyBookResponse, error)
	GetSupplyBooksBySupplier(context.Context, *GetSupplyBooksBySupplierRequest) (*GetSupplyBooksBySupplierResponse, error)
	GetSupplyBookByID(context.Context, *GetSupplyBookByIDRequest) (*GetSupplyBookByIDResponse, error)
	UpdateSupplyBook(context.Context, *UpdateSupplyBookRequest) (*UpdateSupplyBookResponse, error)
	DeleteSupplyBook(context.Context, *DeleteSupplyBookRequest) (*DeleteSupplyBookResponse, error)
	mustEmbedUnimplementedSupplyBookServiceServer()
}

// UnimplementedSupplyBookServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSupplyBookServiceServer struct{}

func (UnimplementedSupplyBookServiceServer) CreateSupplyBook(context.Context, *CreateSupplyBookRequest) (*CreateSupplyBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupplyBook not implemented")
}
func (UnimplementedSupplyBookServiceServer) GetSupplyBooksBySupplier(context.Context, *GetSupplyBooksBySupplierRequest) (*GetSupplyBooksBySupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupplyBooksBySupplier not implemented")
}
func (UnimplementedSupplyBookServiceServer) GetSupplyBookByID(context.Context, *GetSupplyBookByIDRequest) (*GetSupplyBookByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupplyBookByID not implemented")
}
func (UnimplementedSupplyBookServiceServer) UpdateSupplyBook(context.Context, *UpdateSupplyBookRequest) (*UpdateSupplyBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupplyBook not implemented")
}
func (UnimplementedSupplyBookServiceServer) DeleteSupplyBook(context.Context, *DeleteSupplyBookRequest) (*DeleteSupplyBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSupplyBook not implemented")
}
func (UnimplementedSupplyBookServiceServer) mustEmbedUnimplementedSupplyBookServiceServer() {}
func (UnimplementedSupplyBookServiceServer) testEmbeddedByValue()                           {}

// UnsafeSupplyBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupplyBookServiceServer will
// result in compilation errors.
type UnsafeSupplyBookServiceServer interface {
	mustEmbedUnimplementedSupplyBookServiceServer()
}

func RegisterSupplyBookServiceServer(s grpc.ServiceRegistrar, srv SupplyBookServiceServer) {
	// If the following call pancis, it indicates UnimplementedSupplyBookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SupplyBookService_ServiceDesc, srv)
}

func _SupplyBookService_CreateSupplyBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupplyBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyBookServiceServer).CreateSupplyBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyBookService_CreateSupplyBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyBookServiceServer).CreateSupplyBook(ctx, req.(*CreateSupplyBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyBookService_GetSupplyBooksBySupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupplyBooksBySupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyBookServiceServer).GetSupplyBooksBySupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyBookService_GetSupplyBooksBySupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyBookServiceServer).GetSupplyBooksBySupplier(ctx, req.(*GetSupplyBooksBySupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyBookService_GetSupplyBookByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupplyBookByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyBookServiceServer).GetSupplyBookByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyBookService_GetSupplyBookByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyBookServiceServer).GetSupplyBookByID(ctx, req.(*GetSupplyBookByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyBookService_UpdateSupplyBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSupplyBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyBookServiceServer).UpdateSupplyBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyBookService_UpdateSupplyBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyBookServiceServer).UpdateSupplyBook(ctx, req.(*UpdateSupplyBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyBookService_DeleteSupplyBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSupplyBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyBookServiceServer).DeleteSupplyBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyBookService_DeleteSupplyBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyBookServiceServer).DeleteSupplyBook(ctx, req.(*DeleteSupplyBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SupplyBookService_ServiceDesc is the grpc.ServiceDesc for SupplyBookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SupplyBookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookstore.SupplyBookService",
	HandlerType: (*SupplyBookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSupplyBook",
			Handler:    _SupplyBookService_CreateSupplyBook_Handler,
		},
		{
			MethodName: "GetSupplyBooksBySupplier",
			Handler:    _SupplyBookService_GetSupplyBooksBySupplier_Handler,
		},
		{
			MethodName: "GetSupplyBookByID",
			Handler:    _SupplyBookService_GetSupplyBookByID_Handler,
		},
		{
			MethodName: "UpdateSupplyBook",
			Handler:    _SupplyBookService_UpdateSupplyBook_Handler,
		},
		{
			MethodName: "DeleteSupplyBook",
			Handler:    _SupplyBookService_DeleteSupplyBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}

const (
	OnlineService_QueryCustomer_FullMethodName = "/bookstore.OnlineService/QueryCustomer"
	OnlineService_QueryBook_FullMethodName     = "/bookstore.OnlineService/QueryBook"
)

// OnlineServiceClient is the client API for OnlineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 网上查询服务
type OnlineServiceClient interface {
	// 查询客户
	QueryCustomer(ctx context.Context, in *QueryCustomerRequest, opts ...grpc.CallOption) (*QueryCustomerResponse, error)
	// 查询书籍
	QueryBook(ctx context.Context, in *QueryBookRequest, opts ...grpc.CallOption) (*QueryBookResponse, error)
}

type onlineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnlineServiceClient(cc grpc.ClientConnInterface) OnlineServiceClient {
	return &onlineServiceClient{cc}
}

func (c *onlineServiceClient) QueryCustomer(ctx context.Context, in *QueryCustomerRequest, opts ...grpc.CallOption) (*QueryCustomerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCustomerResponse)
	err := c.cc.Invoke(ctx, OnlineService_QueryCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineServiceClient) QueryBook(ctx context.Context, in *QueryBookRequest, opts ...grpc.CallOption) (*QueryBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryBookResponse)
	err := c.cc.Invoke(ctx, OnlineService_QueryBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnlineServiceServer is the server API for OnlineService service.
// All implementations must embed UnimplementedOnlineServiceServer
// for forward compatibility.
//
// 网上查询服务
type OnlineServiceServer interface {
	// 查询客户
	QueryCustomer(context.Context, *QueryCustomerRequest) (*QueryCustomerResponse, error)
	// 查询书籍
	QueryBook(context.Context, *QueryBookRequest) (*QueryBookResponse, error)
	mustEmbedUnimplementedOnlineServiceServer()
}

// UnimplementedOnlineServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOnlineServiceServer struct{}

func (UnimplementedOnlineServiceServer) QueryCustomer(context.Context, *QueryCustomerRequest) (*QueryCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCustomer not implemented")
}
func (UnimplementedOnlineServiceServer) QueryBook(context.Context, *QueryBookRequest) (*QueryBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBook not implemented")
}
func (UnimplementedOnlineServiceServer) mustEmbedUnimplementedOnlineServiceServer() {}
func (UnimplementedOnlineServiceServer) testEmbeddedByValue()                       {}

// UnsafeOnlineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnlineServiceServer will
// result in compilation errors.
type UnsafeOnlineServiceServer interface {
	mustEmbedUnimplementedOnlineServiceServer()
}

func RegisterOnlineServiceServer(s grpc.ServiceRegistrar, srv OnlineServiceServer) {
	// If the following call pancis, it indicates UnimplementedOnlineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OnlineService_ServiceDesc, srv)
}

func _OnlineService_QueryCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServiceServer).QueryCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnlineService_QueryCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServiceServer).QueryCustomer(ctx, req.(*QueryCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineService_QueryBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServiceServer).QueryBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnlineService_QueryBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServiceServer).QueryBook(ctx, req.(*QueryBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OnlineService_ServiceDesc is the grpc.ServiceDesc for OnlineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnlineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookstore.OnlineService",
	HandlerType: (*OnlineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryCustomer",
			Handler:    _OnlineService_QueryCustomer_Handler,
		},
		{
			MethodName: "QueryBook",
			Handler:    _OnlineService_QueryBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}
